- name: Disable swap
  ansible.builtin.command:
    cmd: swapoff -a
  register: swapoff
  changed_when: false

- name: Permanently disable swap
  ansible.posix.mount:
    src: /swap.img
    path: none
    state: absent_from_fstab

- name: Install nfs-common
  ansible.builtin.package:
    name: nfs-common
    state: present

- name: Ensure manifest dir exists
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests
    state: directory
    mode: u+x
  when: inventory_hostname == "k-c-01"

- name: Copy user clusterrolebinding manifest
  ansible.builtin.template:
    src: user-clusterrolebinding.yaml.j2
    dest: "/var/lib/rancher/k3s/server/manifests/{{ lookup('env', 'USERNAME') }}-clusterrolebinding.yaml"
    mode: "0600"
  when: inventory_hostname == "k-c-01"

- name: Copy traefik customisation
  ansible.builtin.copy:
    src: traefik-config.yaml
    dest: "/var/lib/rancher/k3s/server/manifests/traefik-config.yaml"
    mode: "0600"
  when: inventory_hostname == "k-c-01"
  register: traefik_config_copied

- name: Update treafik-config file update time
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests/traefik-config.yaml
    state: touch
  when: traefik_config_copied.changed and inventory_hostname == "k-c-01"

- name: Cluster initialised?
  ansible.builtin.stat:
    path: /var/lib/rancher/k3s/server/node-token
  register: is_initialised
  when: inventory_hostname == "k-c-01"

- name: Init k3s cluster
  ansible.builtin.shell:
    cmd: curl -sfL https://get.k3s.io | K3S_TOKEN={{ lookup('env', 'K3S_TOKEN') }} sh -s - server --cluster-init --disable servicelb --tls-san 'tk3s.lupinelab.co.uk' --tls-san {{ inventory_hostname }}.lupinedmz --node-taint 'node-role.kubernetes.io/control-plane=:NoSchedule --node-label topology.kubernetes.io/region=tc --node-label topology.kubernetes.io/zone=tc-{{ inventory_hostname.split("-"[-1]) }}'
  when: inventory_hostname == "k-c-01" and not is_initialised.stat.exists
  register: k3s_initialised
  no_log: true
  changed_when: k3s_initialised.rc == 0

- name: Is control-plane node
  ansible.builtin.stat:
    path: /etc/rancher/k3s/k3s.yaml
  register: is_control_plane_node
  when: inventory_hostname != "k-c-01"

- name: Add control-plane node
  ansible.builtin.shell:
    cmd: curl -sfL https://get.k3s.io | K3S_TOKEN={{ lookup('env', 'K3S_TOKEN') }} sh -s - server --server https://k-c-01:6443 --disable servicelb --tls-san {{ inventory_hostname }}.lupinedmz --node-taint 'node-role.kubernetes.io/control-plane=:NoSchedule --node-label topology.kubernetes.io/region=tc --node-label topology.kubernetes.io/zone=tc-{{ inventory_hostname.split("-"[-1]) }}'
  when: inventory_hostname != "k-c-01" and not is_control_plane_node.stat.exists
  register: add_control_plane
  no_log: true
  changed_when: add_control_plane.rc == 0

- name: Set coredns replicas
  ansible.builtin.lineinfile:
    path: /var/lib/rancher/k3s/server/manifests/coredns.yaml
    line: "  replicas: 3"
    regexp: "\\s\\sreplicas: \\d"
    insertbefore: "^\\s\\srevisionHistoryLimit:\\s0$"
  register: coredns_updated

- name: Update coredns file update time
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests/coredns.yaml
    state: touch
  when: coredns_updated.changed

- name: Set metrics-server replicas
  ansible.builtin.lineinfile:
    path: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-deployment.yaml
    line: "  replicas: 3"
    regexp: "\\s\\sreplicas: \\d"
    insertbefore: "^\\s\\srevisionHistoryLimit:\\s0$"

- name: Update metrics-server file update time
  ansible.builtin.file:
    path: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-deployment.yaml
    state: touch
  when: coredns_updated.changed
